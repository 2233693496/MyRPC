// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userstore.proto

#ifndef PROTOBUF_INCLUDED_userstore_2eproto
#define PROTOBUF_INCLUDED_userstore_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_userstore_2eproto 

namespace protobuf_userstore_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_userstore_2eproto
namespace MySvr {
namespace UserStore {
class CreateUserRequest;
class CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class CreateUserResponse;
class CreateUserResponseDefaultTypeInternal;
extern CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
class DeleteUserRequest;
class DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class DeleteUserResponse;
class DeleteUserResponseDefaultTypeInternal;
extern DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
class ReadUserRequest;
class ReadUserRequestDefaultTypeInternal;
extern ReadUserRequestDefaultTypeInternal _ReadUserRequest_default_instance_;
class ReadUserResponse;
class ReadUserResponseDefaultTypeInternal;
extern ReadUserResponseDefaultTypeInternal _ReadUserResponse_default_instance_;
class UpdateUserRequest;
class UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserResponse;
class UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace UserStore
}  // namespace MySvr
namespace google {
namespace protobuf {
template<> ::MySvr::UserStore::CreateUserRequest* Arena::CreateMaybeMessage<::MySvr::UserStore::CreateUserRequest>(Arena*);
template<> ::MySvr::UserStore::CreateUserResponse* Arena::CreateMaybeMessage<::MySvr::UserStore::CreateUserResponse>(Arena*);
template<> ::MySvr::UserStore::DeleteUserRequest* Arena::CreateMaybeMessage<::MySvr::UserStore::DeleteUserRequest>(Arena*);
template<> ::MySvr::UserStore::DeleteUserResponse* Arena::CreateMaybeMessage<::MySvr::UserStore::DeleteUserResponse>(Arena*);
template<> ::MySvr::UserStore::ReadUserRequest* Arena::CreateMaybeMessage<::MySvr::UserStore::ReadUserRequest>(Arena*);
template<> ::MySvr::UserStore::ReadUserResponse* Arena::CreateMaybeMessage<::MySvr::UserStore::ReadUserResponse>(Arena*);
template<> ::MySvr::UserStore::UpdateUserRequest* Arena::CreateMaybeMessage<::MySvr::UserStore::UpdateUserRequest>(Arena*);
template<> ::MySvr::UserStore::UpdateUserResponse* Arena::CreateMaybeMessage<::MySvr::UserStore::UpdateUserResponse>(Arena*);
template<> ::MySvr::UserStore::User* Arena::CreateMaybeMessage<::MySvr::UserStore::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MySvr {
namespace UserStore {

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string nick_name = 2;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.CreateUserRequest) */ {
 public:
  CreateUserRequest();
  virtual ~CreateUserRequest();

  CreateUserRequest(const CreateUserRequest& from);

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateUserRequest* other);
  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRequest* New() const final {
    return CreateMaybeMessage<CreateUserRequest>(NULL);
  }

  CreateUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUserRequest& from);
  void MergeFrom(const CreateUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MySvr.UserStore.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::MySvr::UserStore::User& _internal_user() const;
  public:
  const ::MySvr::UserStore::User& user() const;
  ::MySvr::UserStore::User* release_user();
  ::MySvr::UserStore::User* mutable_user();
  void set_allocated_user(::MySvr::UserStore::User* user);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.CreateUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::MySvr::UserStore::User* user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.CreateUserResponse) */ {
 public:
  CreateUserResponse();
  virtual ~CreateUserResponse();

  CreateUserResponse(const CreateUserResponse& from);

  inline CreateUserResponse& operator=(const CreateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUserResponse(CreateUserResponse&& from) noexcept
    : CreateUserResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserResponse& operator=(CreateUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserResponse*>(
               &_CreateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateUserResponse* other);
  friend void swap(CreateUserResponse& a, CreateUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUserResponse* New() const final {
    return CreateMaybeMessage<CreateUserResponse>(NULL);
  }

  CreateUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUserResponse& from);
  void MergeFrom(const CreateUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.CreateUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.UpdateUserRequest) */ {
 public:
  UpdateUserRequest();
  virtual ~UpdateUserRequest();

  UpdateUserRequest(const UpdateUserRequest& from);

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpdateUserRequest* other);
  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return CreateMaybeMessage<UpdateUserRequest>(NULL);
  }

  UpdateUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateUserRequest& from);
  void MergeFrom(const UpdateUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MySvr.UserStore.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::MySvr::UserStore::User& _internal_user() const;
  public:
  const ::MySvr::UserStore::User& user() const;
  ::MySvr::UserStore::User* release_user();
  ::MySvr::UserStore::User* mutable_user();
  void set_allocated_user(::MySvr::UserStore::User* user);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.UpdateUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::MySvr::UserStore::User* user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.UpdateUserResponse) */ {
 public:
  UpdateUserResponse();
  virtual ~UpdateUserResponse();

  UpdateUserResponse(const UpdateUserResponse& from);

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateUserResponse* other);
  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserResponse* New() const final {
    return CreateMaybeMessage<UpdateUserResponse>(NULL);
  }

  UpdateUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateUserResponse& from);
  void MergeFrom(const UpdateUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.UpdateUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.ReadUserRequest) */ {
 public:
  ReadUserRequest();
  virtual ~ReadUserRequest();

  ReadUserRequest(const ReadUserRequest& from);

  inline ReadUserRequest& operator=(const ReadUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadUserRequest(ReadUserRequest&& from) noexcept
    : ReadUserRequest() {
    *this = ::std::move(from);
  }

  inline ReadUserRequest& operator=(ReadUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadUserRequest* internal_default_instance() {
    return reinterpret_cast<const ReadUserRequest*>(
               &_ReadUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReadUserRequest* other);
  friend void swap(ReadUserRequest& a, ReadUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadUserRequest* New() const final {
    return CreateMaybeMessage<ReadUserRequest>(NULL);
  }

  ReadUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadUserRequest& from);
  void MergeFrom(const ReadUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.ReadUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.ReadUserResponse) */ {
 public:
  ReadUserResponse();
  virtual ~ReadUserResponse();

  ReadUserResponse(const ReadUserResponse& from);

  inline ReadUserResponse& operator=(const ReadUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadUserResponse(ReadUserResponse&& from) noexcept
    : ReadUserResponse() {
    *this = ::std::move(from);
  }

  inline ReadUserResponse& operator=(ReadUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadUserResponse* internal_default_instance() {
    return reinterpret_cast<const ReadUserResponse*>(
               &_ReadUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReadUserResponse* other);
  friend void swap(ReadUserResponse& a, ReadUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadUserResponse* New() const final {
    return CreateMaybeMessage<ReadUserResponse>(NULL);
  }

  ReadUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadUserResponse& from);
  void MergeFrom(const ReadUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .MySvr.UserStore.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  private:
  const ::MySvr::UserStore::User& _internal_user() const;
  public:
  const ::MySvr::UserStore::User& user() const;
  ::MySvr::UserStore::User* release_user();
  ::MySvr::UserStore::User* mutable_user();
  void set_allocated_user(::MySvr::UserStore::User* user);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.ReadUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::MySvr::UserStore::User* user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.DeleteUserRequest) */ {
 public:
  DeleteUserRequest();
  virtual ~DeleteUserRequest();

  DeleteUserRequest(const DeleteUserRequest& from);

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeleteUserRequest* other);
  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return CreateMaybeMessage<DeleteUserRequest>(NULL);
  }

  DeleteUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteUserRequest& from);
  void MergeFrom(const DeleteUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.DeleteUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.UserStore.DeleteUserResponse) */ {
 public:
  DeleteUserResponse();
  virtual ~DeleteUserResponse();

  DeleteUserResponse(const DeleteUserResponse& from);

  inline DeleteUserResponse& operator=(const DeleteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteUserResponse(DeleteUserResponse&& from) noexcept
    : DeleteUserResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserResponse& operator=(DeleteUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteUserResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserResponse*>(
               &_DeleteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteUserResponse* other);
  friend void swap(DeleteUserResponse& a, DeleteUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserResponse* New() const final {
    return CreateMaybeMessage<DeleteUserResponse>(NULL);
  }

  DeleteUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteUserResponse& from);
  void MergeFrom(const DeleteUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.UserStore.DeleteUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_userstore_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string user_id = 1;
inline void User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.User.user_id)
  return user_id_.GetNoArena();
}
inline void User::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.User.user_id)
}
#if LANG_CXX11
inline void User::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.User.user_id)
}
#endif
inline void User::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.User.user_id)
}
inline void User::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.User.user_id)
}
inline ::std::string* User::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.User.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.User.user_id)
}

// string nick_name = 2;
inline void User::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::nick_name() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.User.nick_name)
  return nick_name_.GetNoArena();
}
inline void User::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.User.nick_name)
}
#if LANG_CXX11
inline void User::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.User.nick_name)
}
#endif
inline void User::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.User.nick_name)
}
inline void User::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.User.nick_name)
}
inline ::std::string* User::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.User.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nick_name() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.User.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.User.nick_name)
}

// string password = 3;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.User.password)
  return password_.GetNoArena();
}
inline void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.User.password)
}
#if LANG_CXX11
inline void User::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.User.password)
}
#endif
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.User.password)
}
inline ::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.User.password)
}

// -------------------------------------------------------------------

// CreateUserRequest

// .MySvr.UserStore.User user = 1;
inline bool CreateUserRequest::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void CreateUserRequest::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::MySvr::UserStore::User& CreateUserRequest::_internal_user() const {
  return *user_;
}
inline const ::MySvr::UserStore::User& CreateUserRequest::user() const {
  const ::MySvr::UserStore::User* p = user_;
  // @@protoc_insertion_point(field_get:MySvr.UserStore.CreateUserRequest.user)
  return p != NULL ? *p : *reinterpret_cast<const ::MySvr::UserStore::User*>(
      &::MySvr::UserStore::_User_default_instance_);
}
inline ::MySvr::UserStore::User* CreateUserRequest::release_user() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.CreateUserRequest.user)
  
  ::MySvr::UserStore::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::MySvr::UserStore::User* CreateUserRequest::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::MySvr::UserStore::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.CreateUserRequest.user)
  return user_;
}
inline void CreateUserRequest::set_allocated_user(::MySvr::UserStore::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.CreateUserRequest.user)
}

// -------------------------------------------------------------------

// CreateUserResponse

// string message = 1;
inline void CreateUserResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.CreateUserResponse.message)
  return message_.GetNoArena();
}
inline void CreateUserResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.CreateUserResponse.message)
}
#if LANG_CXX11
inline void CreateUserResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.CreateUserResponse.message)
}
#endif
inline void CreateUserResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.CreateUserResponse.message)
}
inline void CreateUserResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.CreateUserResponse.message)
}
inline ::std::string* CreateUserResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.CreateUserResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.CreateUserResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.CreateUserResponse.message)
}

// string user_id = 2;
inline void CreateUserResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserResponse::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.CreateUserResponse.user_id)
  return user_id_.GetNoArena();
}
inline void CreateUserResponse::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.CreateUserResponse.user_id)
}
#if LANG_CXX11
inline void CreateUserResponse::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.CreateUserResponse.user_id)
}
#endif
inline void CreateUserResponse::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.CreateUserResponse.user_id)
}
inline void CreateUserResponse::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.CreateUserResponse.user_id)
}
inline ::std::string* CreateUserResponse::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.CreateUserResponse.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.CreateUserResponse.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.CreateUserResponse.user_id)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .MySvr.UserStore.User user = 1;
inline bool UpdateUserRequest::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void UpdateUserRequest::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::MySvr::UserStore::User& UpdateUserRequest::_internal_user() const {
  return *user_;
}
inline const ::MySvr::UserStore::User& UpdateUserRequest::user() const {
  const ::MySvr::UserStore::User* p = user_;
  // @@protoc_insertion_point(field_get:MySvr.UserStore.UpdateUserRequest.user)
  return p != NULL ? *p : *reinterpret_cast<const ::MySvr::UserStore::User*>(
      &::MySvr::UserStore::_User_default_instance_);
}
inline ::MySvr::UserStore::User* UpdateUserRequest::release_user() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.UpdateUserRequest.user)
  
  ::MySvr::UserStore::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::MySvr::UserStore::User* UpdateUserRequest::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::MySvr::UserStore::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.UpdateUserRequest.user)
  return user_;
}
inline void UpdateUserRequest::set_allocated_user(::MySvr::UserStore::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.UpdateUserRequest.user)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// string message = 1;
inline void UpdateUserResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateUserResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.UpdateUserResponse.message)
  return message_.GetNoArena();
}
inline void UpdateUserResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.UpdateUserResponse.message)
}
#if LANG_CXX11
inline void UpdateUserResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.UpdateUserResponse.message)
}
#endif
inline void UpdateUserResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.UpdateUserResponse.message)
}
inline void UpdateUserResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.UpdateUserResponse.message)
}
inline ::std::string* UpdateUserResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.UpdateUserResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.UpdateUserResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.UpdateUserResponse.message)
}

// -------------------------------------------------------------------

// ReadUserRequest

// string user_id = 1;
inline void ReadUserRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.ReadUserRequest.user_id)
  return user_id_.GetNoArena();
}
inline void ReadUserRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.ReadUserRequest.user_id)
}
#if LANG_CXX11
inline void ReadUserRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.ReadUserRequest.user_id)
}
#endif
inline void ReadUserRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.ReadUserRequest.user_id)
}
inline void ReadUserRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.ReadUserRequest.user_id)
}
inline ::std::string* ReadUserRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.ReadUserRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.ReadUserRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadUserRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.ReadUserRequest.user_id)
}

// -------------------------------------------------------------------

// ReadUserResponse

// string message = 1;
inline void ReadUserResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadUserResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.ReadUserResponse.message)
  return message_.GetNoArena();
}
inline void ReadUserResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.ReadUserResponse.message)
}
#if LANG_CXX11
inline void ReadUserResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.ReadUserResponse.message)
}
#endif
inline void ReadUserResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.ReadUserResponse.message)
}
inline void ReadUserResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.ReadUserResponse.message)
}
inline ::std::string* ReadUserResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.ReadUserResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.ReadUserResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadUserResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.ReadUserResponse.message)
}

// .MySvr.UserStore.User user = 2;
inline bool ReadUserResponse::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void ReadUserResponse::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::MySvr::UserStore::User& ReadUserResponse::_internal_user() const {
  return *user_;
}
inline const ::MySvr::UserStore::User& ReadUserResponse::user() const {
  const ::MySvr::UserStore::User* p = user_;
  // @@protoc_insertion_point(field_get:MySvr.UserStore.ReadUserResponse.user)
  return p != NULL ? *p : *reinterpret_cast<const ::MySvr::UserStore::User*>(
      &::MySvr::UserStore::_User_default_instance_);
}
inline ::MySvr::UserStore::User* ReadUserResponse::release_user() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.ReadUserResponse.user)
  
  ::MySvr::UserStore::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::MySvr::UserStore::User* ReadUserResponse::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::MySvr::UserStore::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.ReadUserResponse.user)
  return user_;
}
inline void ReadUserResponse::set_allocated_user(::MySvr::UserStore::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.ReadUserResponse.user)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// string user_id = 1;
inline void DeleteUserRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.DeleteUserRequest.user_id)
  return user_id_.GetNoArena();
}
inline void DeleteUserRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.DeleteUserRequest.user_id)
}
#if LANG_CXX11
inline void DeleteUserRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.DeleteUserRequest.user_id)
}
#endif
inline void DeleteUserRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.DeleteUserRequest.user_id)
}
inline void DeleteUserRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.DeleteUserRequest.user_id)
}
inline ::std::string* DeleteUserRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.DeleteUserRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.DeleteUserRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteUserRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.DeleteUserRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteUserResponse

// string message = 1;
inline void DeleteUserResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteUserResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.UserStore.DeleteUserResponse.message)
  return message_.GetNoArena();
}
inline void DeleteUserResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.UserStore.DeleteUserResponse.message)
}
#if LANG_CXX11
inline void DeleteUserResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.UserStore.DeleteUserResponse.message)
}
#endif
inline void DeleteUserResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.UserStore.DeleteUserResponse.message)
}
inline void DeleteUserResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.UserStore.DeleteUserResponse.message)
}
inline ::std::string* DeleteUserResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.UserStore.DeleteUserResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.UserStore.DeleteUserResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteUserResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.UserStore.DeleteUserResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserStore
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_userstore_2eproto
