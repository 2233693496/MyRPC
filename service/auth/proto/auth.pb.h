// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_INCLUDED_auth_2eproto
#define PROTOBUF_INCLUDED_auth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_auth_2eproto 

namespace protobuf_auth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_auth_2eproto
namespace MySvr {
namespace Auth {
class GenTicketRequest;
class GenTicketRequestDefaultTypeInternal;
extern GenTicketRequestDefaultTypeInternal _GenTicketRequest_default_instance_;
class GenTicketResponse;
class GenTicketResponseDefaultTypeInternal;
extern GenTicketResponseDefaultTypeInternal _GenTicketResponse_default_instance_;
class UpdateTicketRequest;
class UpdateTicketRequestDefaultTypeInternal;
extern UpdateTicketRequestDefaultTypeInternal _UpdateTicketRequest_default_instance_;
class UpdateTicketResponse;
class UpdateTicketResponseDefaultTypeInternal;
extern UpdateTicketResponseDefaultTypeInternal _UpdateTicketResponse_default_instance_;
class VerifyTicketRequest;
class VerifyTicketRequestDefaultTypeInternal;
extern VerifyTicketRequestDefaultTypeInternal _VerifyTicketRequest_default_instance_;
class VerifyTicketResponse;
class VerifyTicketResponseDefaultTypeInternal;
extern VerifyTicketResponseDefaultTypeInternal _VerifyTicketResponse_default_instance_;
}  // namespace Auth
}  // namespace MySvr
namespace google {
namespace protobuf {
template<> ::MySvr::Auth::GenTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::GenTicketRequest>(Arena*);
template<> ::MySvr::Auth::GenTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::GenTicketResponse>(Arena*);
template<> ::MySvr::Auth::UpdateTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::UpdateTicketRequest>(Arena*);
template<> ::MySvr::Auth::UpdateTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::UpdateTicketResponse>(Arena*);
template<> ::MySvr::Auth::VerifyTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::VerifyTicketRequest>(Arena*);
template<> ::MySvr::Auth::VerifyTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::VerifyTicketResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MySvr {
namespace Auth {

// ===================================================================

class GenTicketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.GenTicketRequest) */ {
 public:
  GenTicketRequest();
  virtual ~GenTicketRequest();

  GenTicketRequest(const GenTicketRequest& from);

  inline GenTicketRequest& operator=(const GenTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenTicketRequest(GenTicketRequest&& from) noexcept
    : GenTicketRequest() {
    *this = ::std::move(from);
  }

  inline GenTicketRequest& operator=(GenTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenTicketRequest* internal_default_instance() {
    return reinterpret_cast<const GenTicketRequest*>(
               &_GenTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GenTicketRequest* other);
  friend void swap(GenTicketRequest& a, GenTicketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenTicketRequest* New() const final {
    return CreateMaybeMessage<GenTicketRequest>(NULL);
  }

  GenTicketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenTicketRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenTicketRequest& from);
  void MergeFrom(const GenTicketRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenTicketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // int32 expire_time = 2;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 2;
  ::google::protobuf::int32 expire_time() const;
  void set_expire_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.GenTicketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::int32 expire_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenTicketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.GenTicketResponse) */ {
 public:
  GenTicketResponse();
  virtual ~GenTicketResponse();

  GenTicketResponse(const GenTicketResponse& from);

  inline GenTicketResponse& operator=(const GenTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenTicketResponse(GenTicketResponse&& from) noexcept
    : GenTicketResponse() {
    *this = ::std::move(from);
  }

  inline GenTicketResponse& operator=(GenTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenTicketResponse* internal_default_instance() {
    return reinterpret_cast<const GenTicketResponse*>(
               &_GenTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GenTicketResponse* other);
  friend void swap(GenTicketResponse& a, GenTicketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenTicketResponse* New() const final {
    return CreateMaybeMessage<GenTicketResponse>(NULL);
  }

  GenTicketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenTicketResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenTicketResponse& from);
  void MergeFrom(const GenTicketResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenTicketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.GenTicketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyTicketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.VerifyTicketRequest) */ {
 public:
  VerifyTicketRequest();
  virtual ~VerifyTicketRequest();

  VerifyTicketRequest(const VerifyTicketRequest& from);

  inline VerifyTicketRequest& operator=(const VerifyTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyTicketRequest(VerifyTicketRequest&& from) noexcept
    : VerifyTicketRequest() {
    *this = ::std::move(from);
  }

  inline VerifyTicketRequest& operator=(VerifyTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyTicketRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyTicketRequest*>(
               &_VerifyTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VerifyTicketRequest* other);
  friend void swap(VerifyTicketRequest& a, VerifyTicketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyTicketRequest* New() const final {
    return CreateMaybeMessage<VerifyTicketRequest>(NULL);
  }

  VerifyTicketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyTicketRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyTicketRequest& from);
  void MergeFrom(const VerifyTicketRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyTicketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string ticket = 2;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.VerifyTicketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyTicketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.VerifyTicketResponse) */ {
 public:
  VerifyTicketResponse();
  virtual ~VerifyTicketResponse();

  VerifyTicketResponse(const VerifyTicketResponse& from);

  inline VerifyTicketResponse& operator=(const VerifyTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyTicketResponse(VerifyTicketResponse&& from) noexcept
    : VerifyTicketResponse() {
    *this = ::std::move(from);
  }

  inline VerifyTicketResponse& operator=(VerifyTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyTicketResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyTicketResponse*>(
               &_VerifyTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VerifyTicketResponse* other);
  friend void swap(VerifyTicketResponse& a, VerifyTicketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyTicketResponse* New() const final {
    return CreateMaybeMessage<VerifyTicketResponse>(NULL);
  }

  VerifyTicketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyTicketResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyTicketResponse& from);
  void MergeFrom(const VerifyTicketResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyTicketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.VerifyTicketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTicketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.UpdateTicketRequest) */ {
 public:
  UpdateTicketRequest();
  virtual ~UpdateTicketRequest();

  UpdateTicketRequest(const UpdateTicketRequest& from);

  inline UpdateTicketRequest& operator=(const UpdateTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTicketRequest(UpdateTicketRequest&& from) noexcept
    : UpdateTicketRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTicketRequest& operator=(UpdateTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTicketRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTicketRequest*>(
               &_UpdateTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateTicketRequest* other);
  friend void swap(UpdateTicketRequest& a, UpdateTicketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTicketRequest* New() const final {
    return CreateMaybeMessage<UpdateTicketRequest>(NULL);
  }

  UpdateTicketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTicketRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTicketRequest& from);
  void MergeFrom(const UpdateTicketRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTicketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string ticket = 2;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.UpdateTicketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTicketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.UpdateTicketResponse) */ {
 public:
  UpdateTicketResponse();
  virtual ~UpdateTicketResponse();

  UpdateTicketResponse(const UpdateTicketResponse& from);

  inline UpdateTicketResponse& operator=(const UpdateTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTicketResponse(UpdateTicketResponse&& from) noexcept
    : UpdateTicketResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTicketResponse& operator=(UpdateTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTicketResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTicketResponse*>(
               &_UpdateTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UpdateTicketResponse* other);
  friend void swap(UpdateTicketResponse& a, UpdateTicketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTicketResponse* New() const final {
    return CreateMaybeMessage<UpdateTicketResponse>(NULL);
  }

  UpdateTicketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTicketResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTicketResponse& from);
  void MergeFrom(const UpdateTicketResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTicketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.Auth.UpdateTicketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenTicketRequest

// string user_id = 1;
inline void GenTicketRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketRequest.user_id)
  return user_id_.GetNoArena();
}
inline void GenTicketRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketRequest.user_id)
}
#if LANG_CXX11
inline void GenTicketRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketRequest.user_id)
}
#endif
inline void GenTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketRequest.user_id)
}
inline void GenTicketRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketRequest.user_id)
}
inline ::std::string* GenTicketRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenTicketRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketRequest.user_id)
}

// int32 expire_time = 2;
inline void GenTicketRequest::clear_expire_time() {
  expire_time_ = 0;
}
inline ::google::protobuf::int32 GenTicketRequest::expire_time() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketRequest.expire_time)
  return expire_time_;
}
inline void GenTicketRequest::set_expire_time(::google::protobuf::int32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketRequest.expire_time)
}

// -------------------------------------------------------------------

// GenTicketResponse

// string ticket = 1;
inline void GenTicketResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketResponse.ticket)
  return ticket_.GetNoArena();
}
inline void GenTicketResponse::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketResponse.ticket)
}
#if LANG_CXX11
inline void GenTicketResponse::set_ticket(::std::string&& value) {
  
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketResponse.ticket)
}
#endif
inline void GenTicketResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketResponse.ticket)
}
inline void GenTicketResponse::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketResponse.ticket)
}
inline ::std::string* GenTicketResponse::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketResponse.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenTicketResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketResponse.ticket)
}

// string message = 2;
inline void GenTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketResponse.message)
  return message_.GetNoArena();
}
inline void GenTicketResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketResponse.message)
}
#if LANG_CXX11
inline void GenTicketResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketResponse.message)
}
#endif
inline void GenTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketResponse.message)
}
inline void GenTicketResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketResponse.message)
}
inline ::std::string* GenTicketResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketResponse.message)
}

// -------------------------------------------------------------------

// VerifyTicketRequest

// string user_id = 1;
inline void VerifyTicketRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketRequest.user_id)
  return user_id_.GetNoArena();
}
inline void VerifyTicketRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketRequest.user_id)
}
#if LANG_CXX11
inline void VerifyTicketRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketRequest.user_id)
}
#endif
inline void VerifyTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline void VerifyTicketRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline ::std::string* VerifyTicketRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyTicketRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketRequest.user_id)
}

// string ticket = 2;
inline void VerifyTicketRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyTicketRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketRequest.ticket)
  return ticket_.GetNoArena();
}
inline void VerifyTicketRequest::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketRequest.ticket)
}
#if LANG_CXX11
inline void VerifyTicketRequest::set_ticket(::std::string&& value) {
  
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketRequest.ticket)
}
#endif
inline void VerifyTicketRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline void VerifyTicketRequest::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline ::std::string* VerifyTicketRequest::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketRequest.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyTicketRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketRequest.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyTicketRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketRequest.ticket)
}

// -------------------------------------------------------------------

// VerifyTicketResponse

// string message = 1;
inline void VerifyTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketResponse.message)
  return message_.GetNoArena();
}
inline void VerifyTicketResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketResponse.message)
}
#if LANG_CXX11
inline void VerifyTicketResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketResponse.message)
}
#endif
inline void VerifyTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketResponse.message)
}
inline void VerifyTicketResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketResponse.message)
}
inline ::std::string* VerifyTicketResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketResponse.message)
}

// -------------------------------------------------------------------

// UpdateTicketRequest

// string user_id = 1;
inline void UpdateTicketRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketRequest.user_id)
  return user_id_.GetNoArena();
}
inline void UpdateTicketRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketRequest.user_id)
}
#if LANG_CXX11
inline void UpdateTicketRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketRequest.user_id)
}
#endif
inline void UpdateTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline void UpdateTicketRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline ::std::string* UpdateTicketRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTicketRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketRequest.user_id)
}

// string ticket = 2;
inline void UpdateTicketRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTicketRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketRequest.ticket)
  return ticket_.GetNoArena();
}
inline void UpdateTicketRequest::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketRequest.ticket)
}
#if LANG_CXX11
inline void UpdateTicketRequest::set_ticket(::std::string&& value) {
  
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketRequest.ticket)
}
#endif
inline void UpdateTicketRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline void UpdateTicketRequest::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline ::std::string* UpdateTicketRequest::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketRequest.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTicketRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketRequest.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTicketRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketRequest.ticket)
}

// -------------------------------------------------------------------

// UpdateTicketResponse

// string ticket = 1;
inline void UpdateTicketResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketResponse.ticket)
  return ticket_.GetNoArena();
}
inline void UpdateTicketResponse::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketResponse.ticket)
}
#if LANG_CXX11
inline void UpdateTicketResponse::set_ticket(::std::string&& value) {
  
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketResponse.ticket)
}
#endif
inline void UpdateTicketResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline void UpdateTicketResponse::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline ::std::string* UpdateTicketResponse::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketResponse.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTicketResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketResponse.ticket)
}

// string message = 2;
inline void UpdateTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketResponse.message)
  return message_.GetNoArena();
}
inline void UpdateTicketResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketResponse.message)
}
#if LANG_CXX11
inline void UpdateTicketResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketResponse.message)
}
#endif
inline void UpdateTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketResponse.message)
}
inline void UpdateTicketResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketResponse.message)
}
inline ::std::string* UpdateTicketResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_auth_2eproto
