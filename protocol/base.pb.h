// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_INCLUDED_base_2eproto
#define PROTOBUF_INCLUDED_base_2eproto

#include <google/protobuf/stubs/common.h>

#include <string>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto

namespace protobuf_base_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_base_2eproto
namespace MySvr {
namespace Base {
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class FastRespResponse;
class FastRespResponseDefaultTypeInternal;
extern FastRespResponseDefaultTypeInternal _FastRespResponse_default_instance_;
class OneWayResponse;
class OneWayResponseDefaultTypeInternal;
extern OneWayResponseDefaultTypeInternal _OneWayResponse_default_instance_;
class TraceStack;
class TraceStackDefaultTypeInternal;
extern TraceStackDefaultTypeInternal _TraceStack_default_instance_;
}  // namespace Base
}  // namespace MySvr
namespace google {
namespace protobuf {
template <>
::MySvr::Base::Context* Arena::CreateMaybeMessage<::MySvr::Base::Context>(Arena*);
template <>
::MySvr::Base::FastRespResponse* Arena::CreateMaybeMessage<::MySvr::Base::FastRespResponse>(Arena*);
template <>
::MySvr::Base::OneWayResponse* Arena::CreateMaybeMessage<::MySvr::Base::OneWayResponse>(Arena*);
template <>
::MySvr::Base::TraceStack* Arena::CreateMaybeMessage<::MySvr::Base::TraceStack>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MySvr {
namespace Base {

// ===================================================================

class TraceStack
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.TraceStack) */ {
 public:
  TraceStack();
  virtual ~TraceStack();

  TraceStack(const TraceStack& from);

  inline TraceStack& operator=(const TraceStack& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  TraceStack(TraceStack&& from) noexcept : TraceStack() { *this = ::std::move(from); }

  inline TraceStack& operator=(TraceStack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceStack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceStack* internal_default_instance() {
    return reinterpret_cast<const TraceStack*>(&_TraceStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  void Swap(TraceStack* other);
  friend void swap(TraceStack& a, TraceStack& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline TraceStack* New() const final { return CreateMaybeMessage<TraceStack>(NULL); }

  TraceStack* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage<TraceStack>(arena); }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TraceStack& from);
  void MergeFrom(const TraceStack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                     ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceStack* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 3;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
#if LANG_CXX11
  void set_service_name(::std::string&& value);
#endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string rpc_name = 4;
  void clear_rpc_name();
  static const int kRpcNameFieldNumber = 4;
  const ::std::string& rpc_name() const;
  void set_rpc_name(const ::std::string& value);
#if LANG_CXX11
  void set_rpc_name(::std::string&& value);
#endif
  void set_rpc_name(const char* value);
  void set_rpc_name(const char* value, size_t size);
  ::std::string* mutable_rpc_name();
  ::std::string* release_rpc_name();
  void set_allocated_rpc_name(::std::string* rpc_name);

  // string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
#if LANG_CXX11
  void set_message(::std::string&& value);
#endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 parent_id = 1;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 1;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // int32 current_id = 2;
  void clear_current_id();
  static const int kCurrentIdFieldNumber = 2;
  ::google::protobuf::int32 current_id() const;
  void set_current_id(::google::protobuf::int32 value);

  // int32 status_code = 5;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 5;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // bool is_batch = 8;
  void clear_is_batch();
  static const int kIsBatchFieldNumber = 8;
  bool is_batch() const;
  void set_is_batch(bool value);

  // int64 spend_us = 7;
  void clear_spend_us();
  static const int kSpendUsFieldNumber = 7;
  ::google::protobuf::int64 spend_us() const;
  void set_spend_us(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MySvr.Base.TraceStack)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr rpc_name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 current_id_;
  ::google::protobuf::int32 status_code_;
  bool is_batch_;
  ::google::protobuf::int64 spend_us_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Context : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  Context(Context&& from) noexcept : Context() { *this = ::std::move(from); }

  inline Context& operator=(Context&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(&_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  void Swap(Context* other);
  friend void swap(Context& a, Context& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline Context* New() const final { return CreateMaybeMessage<Context>(NULL); }

  Context* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage<Context>(arena); }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                     ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MySvr.Base.TraceStack trace_stack = 8;
  int trace_stack_size() const;
  void clear_trace_stack();
  static const int kTraceStackFieldNumber = 8;
  ::MySvr::Base::TraceStack* mutable_trace_stack(int index);
  ::google::protobuf::RepeatedPtrField<::MySvr::Base::TraceStack>* mutable_trace_stack();
  const ::MySvr::Base::TraceStack& trace_stack(int index) const;
  ::MySvr::Base::TraceStack* add_trace_stack();
  const ::google::protobuf::RepeatedPtrField<::MySvr::Base::TraceStack>& trace_stack() const;

  // string log_id = 1;
  void clear_log_id();
  static const int kLogIdFieldNumber = 1;
  const ::std::string& log_id() const;
  void set_log_id(const ::std::string& value);
#if LANG_CXX11
  void set_log_id(::std::string&& value);
#endif
  void set_log_id(const char* value);
  void set_log_id(const char* value, size_t size);
  ::std::string* mutable_log_id();
  ::std::string* release_log_id();
  void set_allocated_log_id(::std::string* log_id);

  // string service_name = 2;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
#if LANG_CXX11
  void set_service_name(::std::string&& value);
#endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string rpc_name = 3;
  void clear_rpc_name();
  static const int kRpcNameFieldNumber = 3;
  const ::std::string& rpc_name() const;
  void set_rpc_name(const ::std::string& value);
#if LANG_CXX11
  void set_rpc_name(::std::string&& value);
#endif
  void set_rpc_name(const char* value);
  void set_rpc_name(const char* value, size_t size);
  ::std::string* mutable_rpc_name();
  ::std::string* release_rpc_name();
  void set_allocated_rpc_name(::std::string* rpc_name);

  // int32 status_code = 4;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 4;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // int32 current_stack_id = 5;
  void clear_current_stack_id();
  static const int kCurrentStackIdFieldNumber = 5;
  ::google::protobuf::int32 current_stack_id() const;
  void set_current_stack_id(::google::protobuf::int32 value);

  // int32 parent_stack_id = 6;
  void clear_parent_stack_id();
  static const int kParentStackIdFieldNumber = 6;
  ::google::protobuf::int32 parent_stack_id() const;
  void set_parent_stack_id(::google::protobuf::int32 value);

  // int32 stack_alloc_id = 7;
  void clear_stack_alloc_id();
  static const int kStackAllocIdFieldNumber = 7;
  ::google::protobuf::int32 stack_alloc_id() const;
  void set_stack_alloc_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MySvr.Base.Context)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::MySvr::Base::TraceStack> trace_stack_;
  ::google::protobuf::internal::ArenaStringPtr log_id_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr rpc_name_;
  ::google::protobuf::int32 status_code_;
  ::google::protobuf::int32 current_stack_id_;
  ::google::protobuf::int32 parent_stack_id_;
  ::google::protobuf::int32 stack_alloc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneWayResponse
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.OneWayResponse) */ {
 public:
  OneWayResponse();
  virtual ~OneWayResponse();

  OneWayResponse(const OneWayResponse& from);

  inline OneWayResponse& operator=(const OneWayResponse& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  OneWayResponse(OneWayResponse&& from) noexcept : OneWayResponse() { *this = ::std::move(from); }

  inline OneWayResponse& operator=(OneWayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneWayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneWayResponse* internal_default_instance() {
    return reinterpret_cast<const OneWayResponse*>(&_OneWayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  void Swap(OneWayResponse* other);
  friend void swap(OneWayResponse& a, OneWayResponse& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline OneWayResponse* New() const final { return CreateMaybeMessage<OneWayResponse>(NULL); }

  OneWayResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneWayResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneWayResponse& from);
  void MergeFrom(const OneWayResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                     ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneWayResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MySvr.Base.OneWayResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastRespResponse
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.FastRespResponse) */ {
 public:
  FastRespResponse();
  virtual ~FastRespResponse();

  FastRespResponse(const FastRespResponse& from);

  inline FastRespResponse& operator=(const FastRespResponse& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  FastRespResponse(FastRespResponse&& from) noexcept : FastRespResponse() { *this = ::std::move(from); }

  inline FastRespResponse& operator=(FastRespResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastRespResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastRespResponse* internal_default_instance() {
    return reinterpret_cast<const FastRespResponse*>(&_FastRespResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  void Swap(FastRespResponse* other);
  friend void swap(FastRespResponse& a, FastRespResponse& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline FastRespResponse* New() const final { return CreateMaybeMessage<FastRespResponse>(NULL); }

  FastRespResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FastRespResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FastRespResponse& from);
  void MergeFrom(const FastRespResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                     ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastRespResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MySvr.Base.FastRespResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// ===================================================================

static const int kPortFieldNumber = 50001;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::ServiceOptions, ::google::protobuf::internal::PrimitiveTypeTraits<::google::protobuf::int32>, 5,
    false>
    Port;
static const int kMethodModeFieldNumber = 50002;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::PrimitiveTypeTraits<::google::protobuf::int32>, 5,
    false>
    MethodMode;

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceStack

// int32 parent_id = 1;
inline void TraceStack::clear_parent_id() { parent_id_ = 0; }
inline ::google::protobuf::int32 TraceStack::parent_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.parent_id)
  return parent_id_;
}
inline void TraceStack::set_parent_id(::google::protobuf::int32 value) {
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.parent_id)
}

// int32 current_id = 2;
inline void TraceStack::clear_current_id() { current_id_ = 0; }
inline ::google::protobuf::int32 TraceStack::current_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.current_id)
  return current_id_;
}
inline void TraceStack::set_current_id(::google::protobuf::int32 value) {
  current_id_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.current_id)
}

// string service_name = 3;
inline void TraceStack::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceStack::service_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.service_name)
  return service_name_.GetNoArena();
}
inline void TraceStack::set_service_name(const ::std::string& value) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.service_name)
}
#if LANG_CXX11
inline void TraceStack::set_service_name(::std::string&& value) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.service_name)
}
#endif
inline void TraceStack::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.service_name)
}
inline void TraceStack::set_service_name(const char* value, size_t size) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.service_name)
}
inline ::std::string* TraceStack::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceStack::release_service_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.service_name)

  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceStack::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
  } else {
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.service_name)
}

// string rpc_name = 4;
inline void TraceStack::clear_rpc_name() {
  rpc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceStack::rpc_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.rpc_name)
  return rpc_name_.GetNoArena();
}
inline void TraceStack::set_rpc_name(const ::std::string& value) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.rpc_name)
}
#if LANG_CXX11
inline void TraceStack::set_rpc_name(::std::string&& value) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.rpc_name)
}
#endif
inline void TraceStack::set_rpc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.rpc_name)
}
inline void TraceStack::set_rpc_name(const char* value, size_t size) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.rpc_name)
}
inline ::std::string* TraceStack::mutable_rpc_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.rpc_name)
  return rpc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceStack::release_rpc_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.rpc_name)

  return rpc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceStack::set_allocated_rpc_name(::std::string* rpc_name) {
  if (rpc_name != NULL) {
  } else {
  }
  rpc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_name);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.rpc_name)
}

// int32 status_code = 5;
inline void TraceStack::clear_status_code() { status_code_ = 0; }
inline ::google::protobuf::int32 TraceStack::status_code() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.status_code)
  return status_code_;
}
inline void TraceStack::set_status_code(::google::protobuf::int32 value) {
  status_code_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.status_code)
}

// string message = 6;
inline void TraceStack::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceStack::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.message)
  return message_.GetNoArena();
}
inline void TraceStack::set_message(const ::std::string& value) {
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.message)
}
#if LANG_CXX11
inline void TraceStack::set_message(::std::string&& value) {
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.message)
}
#endif
inline void TraceStack::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.message)
}
inline void TraceStack::set_message(const char* value, size_t size) {
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.message)
}
inline ::std::string* TraceStack::mutable_message() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceStack::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.message)

  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceStack::set_allocated_message(::std::string* message) {
  if (message != NULL) {
  } else {
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.message)
}

// int64 spend_us = 7;
inline void TraceStack::clear_spend_us() { spend_us_ = GOOGLE_LONGLONG(0); }
inline ::google::protobuf::int64 TraceStack::spend_us() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.spend_us)
  return spend_us_;
}
inline void TraceStack::set_spend_us(::google::protobuf::int64 value) {
  spend_us_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.spend_us)
}

// bool is_batch = 8;
inline void TraceStack::clear_is_batch() { is_batch_ = false; }
inline bool TraceStack::is_batch() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.is_batch)
  return is_batch_;
}
inline void TraceStack::set_is_batch(bool value) {
  is_batch_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.is_batch)
}

// -------------------------------------------------------------------

// Context

// string log_id = 1;
inline void Context::clear_log_id() {
  log_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::log_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.log_id)
  return log_id_.GetNoArena();
}
inline void Context::set_log_id(const ::std::string& value) {
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.log_id)
}
#if LANG_CXX11
inline void Context::set_log_id(::std::string&& value) {
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.log_id)
}
#endif
inline void Context::set_log_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.log_id)
}
inline void Context::set_log_id(const char* value, size_t size) {
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.log_id)
}
inline ::std::string* Context::mutable_log_id() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.log_id)
  return log_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_log_id() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.log_id)

  return log_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_log_id(::std::string* log_id) {
  if (log_id != NULL) {
  } else {
  }
  log_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.log_id)
}

// string service_name = 2;
inline void Context::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::service_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.service_name)
  return service_name_.GetNoArena();
}
inline void Context::set_service_name(const ::std::string& value) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.service_name)
}
#if LANG_CXX11
inline void Context::set_service_name(::std::string&& value) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.service_name)
}
#endif
inline void Context::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.service_name)
}
inline void Context::set_service_name(const char* value, size_t size) {
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.service_name)
}
inline ::std::string* Context::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_service_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.service_name)

  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
  } else {
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.service_name)
}

// string rpc_name = 3;
inline void Context::clear_rpc_name() {
  rpc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::rpc_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.rpc_name)
  return rpc_name_.GetNoArena();
}
inline void Context::set_rpc_name(const ::std::string& value) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.rpc_name)
}
#if LANG_CXX11
inline void Context::set_rpc_name(::std::string&& value) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.rpc_name)
}
#endif
inline void Context::set_rpc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.rpc_name)
}
inline void Context::set_rpc_name(const char* value, size_t size) {
  rpc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.rpc_name)
}
inline ::std::string* Context::mutable_rpc_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.rpc_name)
  return rpc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_rpc_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.rpc_name)

  return rpc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_rpc_name(::std::string* rpc_name) {
  if (rpc_name != NULL) {
  } else {
  }
  rpc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_name);
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.rpc_name)
}

// int32 status_code = 4;
inline void Context::clear_status_code() { status_code_ = 0; }
inline ::google::protobuf::int32 Context::status_code() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.status_code)
  return status_code_;
}
inline void Context::set_status_code(::google::protobuf::int32 value) {
  status_code_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.status_code)
}

// int32 current_stack_id = 5;
inline void Context::clear_current_stack_id() { current_stack_id_ = 0; }
inline ::google::protobuf::int32 Context::current_stack_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.current_stack_id)
  return current_stack_id_;
}
inline void Context::set_current_stack_id(::google::protobuf::int32 value) {
  current_stack_id_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.current_stack_id)
}

// int32 parent_stack_id = 6;
inline void Context::clear_parent_stack_id() { parent_stack_id_ = 0; }
inline ::google::protobuf::int32 Context::parent_stack_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.parent_stack_id)
  return parent_stack_id_;
}
inline void Context::set_parent_stack_id(::google::protobuf::int32 value) {
  parent_stack_id_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.parent_stack_id)
}

// int32 stack_alloc_id = 7;
inline void Context::clear_stack_alloc_id() { stack_alloc_id_ = 0; }
inline ::google::protobuf::int32 Context::stack_alloc_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.stack_alloc_id)
  return stack_alloc_id_;
}
inline void Context::set_stack_alloc_id(::google::protobuf::int32 value) {
  stack_alloc_id_ = value;
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.stack_alloc_id)
}

// repeated .MySvr.Base.TraceStack trace_stack = 8;
inline int Context::trace_stack_size() const { return trace_stack_.size(); }
inline void Context::clear_trace_stack() { trace_stack_.Clear(); }
inline ::MySvr::Base::TraceStack* Context::mutable_trace_stack(int index) {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.trace_stack)
  return trace_stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MySvr::Base::TraceStack>* Context::mutable_trace_stack() {
  // @@protoc_insertion_point(field_mutable_list:MySvr.Base.Context.trace_stack)
  return &trace_stack_;
}
inline const ::MySvr::Base::TraceStack& Context::trace_stack(int index) const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.trace_stack)
  return trace_stack_.Get(index);
}
inline ::MySvr::Base::TraceStack* Context::add_trace_stack() {
  // @@protoc_insertion_point(field_add:MySvr.Base.Context.trace_stack)
  return trace_stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::MySvr::Base::TraceStack>& Context::trace_stack() const {
  // @@protoc_insertion_point(field_list:MySvr.Base.Context.trace_stack)
  return trace_stack_;
}

// -------------------------------------------------------------------

// OneWayResponse

// -------------------------------------------------------------------

// FastRespResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace Base
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_base_2eproto
