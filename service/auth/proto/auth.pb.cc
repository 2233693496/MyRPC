// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace MySvr {
namespace Auth {
class GenTicketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenTicketRequest>
      _instance;
} _GenTicketRequest_default_instance_;
class GenTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenTicketResponse>
      _instance;
} _GenTicketResponse_default_instance_;
class VerifyTicketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyTicketRequest>
      _instance;
} _VerifyTicketRequest_default_instance_;
class VerifyTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyTicketResponse>
      _instance;
} _VerifyTicketResponse_default_instance_;
class UpdateTicketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTicketRequest>
      _instance;
} _UpdateTicketRequest_default_instance_;
class UpdateTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTicketResponse>
      _instance;
} _UpdateTicketResponse_default_instance_;
}  // namespace Auth
}  // namespace MySvr
namespace protobuf_auth_2eproto {
static void InitDefaultsGenTicketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_GenTicketRequest_default_instance_;
    new (ptr) ::MySvr::Auth::GenTicketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::GenTicketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenTicketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenTicketRequest}, {}};

static void InitDefaultsGenTicketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_GenTicketResponse_default_instance_;
    new (ptr) ::MySvr::Auth::GenTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::GenTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenTicketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenTicketResponse}, {}};

static void InitDefaultsVerifyTicketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_VerifyTicketRequest_default_instance_;
    new (ptr) ::MySvr::Auth::VerifyTicketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::VerifyTicketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyTicketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyTicketRequest}, {}};

static void InitDefaultsVerifyTicketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_VerifyTicketResponse_default_instance_;
    new (ptr) ::MySvr::Auth::VerifyTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::VerifyTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyTicketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyTicketResponse}, {}};

static void InitDefaultsUpdateTicketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_UpdateTicketRequest_default_instance_;
    new (ptr) ::MySvr::Auth::UpdateTicketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::UpdateTicketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateTicketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateTicketRequest}, {}};

static void InitDefaultsUpdateTicketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::Auth::_UpdateTicketResponse_default_instance_;
    new (ptr) ::MySvr::Auth::UpdateTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::Auth::UpdateTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateTicketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateTicketResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GenTicketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenTicketResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyTicketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyTicketResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTicketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTicketResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketRequest, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketRequest, expire_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::GenTicketResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::VerifyTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::VerifyTicketRequest, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::VerifyTicketRequest, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::VerifyTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::VerifyTicketResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketRequest, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketRequest, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::Auth::UpdateTicketResponse, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MySvr::Auth::GenTicketRequest)},
  { 7, -1, sizeof(::MySvr::Auth::GenTicketResponse)},
  { 14, -1, sizeof(::MySvr::Auth::VerifyTicketRequest)},
  { 21, -1, sizeof(::MySvr::Auth::VerifyTicketResponse)},
  { 27, -1, sizeof(::MySvr::Auth::UpdateTicketRequest)},
  { 34, -1, sizeof(::MySvr::Auth::UpdateTicketResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_GenTicketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_GenTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_VerifyTicketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_VerifyTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_UpdateTicketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::Auth::_UpdateTicketResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "auth.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nauth.proto\022\nMySvr.Auth\032\nbase.proto\"8\n\020"
      "GenTicketRequest\022\017\n\007user_id\030\001 \001(\t\022\023\n\013exp"
      "ire_time\030\002 \001(\005\"4\n\021GenTicketResponse\022\016\n\006t"
      "icket\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\"6\n\023VerifyTi"
      "cketRequest\022\017\n\007user_id\030\001 \001(\t\022\016\n\006ticket\030\002"
      " \001(\t\"\'\n\024VerifyTicketResponse\022\017\n\007message\030"
      "\001 \001(\t\"6\n\023UpdateTicketRequest\022\017\n\007user_id\030"
      "\001 \001(\t\022\016\n\006ticket\030\002 \001(\t\"7\n\024UpdateTicketRes"
      "ponse\022\016\n\006ticket\030\001 \001(\t\022\017\n\007message\030\002 \001(\t2\375"
      "\001\n\004Auth\022H\n\tGenTicket\022\034.MySvr.Auth.GenTic"
      "ketRequest\032\035.MySvr.Auth.GenTicketRespons"
      "e\022Q\n\014VerifyTicket\022\037.MySvr.Auth.VerifyTic"
      "ketRequest\032 .MySvr.Auth.VerifyTicketResp"
      "onse\022Q\n\014UpdateTicket\022\037.MySvr.Auth.Update"
      "TicketRequest\032 .MySvr.Auth.UpdateTicketR"
      "esponse\032\005\210\265\030\233\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auth.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_auth_2eproto
namespace MySvr {
namespace Auth {

// ===================================================================

void GenTicketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenTicketRequest::kUserIdFieldNumber;
const int GenTicketRequest::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenTicketRequest::GenTicketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_GenTicketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.GenTicketRequest)
}
GenTicketRequest::GenTicketRequest(const GenTicketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  expire_time_ = from.expire_time_;
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.GenTicketRequest)
}

void GenTicketRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = 0;
}

GenTicketRequest::~GenTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.GenTicketRequest)
  SharedDtor();
}

void GenTicketRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GenTicketRequest::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GenTicketRequest& GenTicketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_GenTicketRequest.base);
  return *internal_default_instance();
}


void GenTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.GenTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = 0;
  _internal_metadata_.Clear();
}

bool GenTicketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.GenTicketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.GenTicketRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expire_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.GenTicketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.GenTicketRequest)
  return false;
#undef DO_
}

void GenTicketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.GenTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expire_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.GenTicketRequest)
}

::google::protobuf::uint8* GenTicketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.GenTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expire_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.GenTicketRequest)
  return target;
}

size_t GenTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.GenTicketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expire_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenTicketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.GenTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenTicketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenTicketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.GenTicketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.GenTicketRequest)
    MergeFrom(*source);
  }
}

void GenTicketRequest::MergeFrom(const GenTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.GenTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
}

void GenTicketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.GenTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenTicketRequest::CopyFrom(const GenTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.GenTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenTicketRequest::IsInitialized() const {
  return true;
}

void GenTicketRequest::Swap(GenTicketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenTicketRequest::InternalSwap(GenTicketRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expire_time_, other->expire_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GenTicketRequest::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GenTicketResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenTicketResponse::kTicketFieldNumber;
const int GenTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenTicketResponse::GenTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_GenTicketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.GenTicketResponse)
}
GenTicketResponse::GenTicketResponse(const GenTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticket().size() > 0) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.GenTicketResponse)
}

void GenTicketResponse::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GenTicketResponse::~GenTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.GenTicketResponse)
  SharedDtor();
}

void GenTicketResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GenTicketResponse::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GenTicketResponse& GenTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_GenTicketResponse.base);
  return *internal_default_instance();
}


void GenTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.GenTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GenTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.GenTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), static_cast<int>(this->ticket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.GenTicketResponse.ticket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.GenTicketResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.GenTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.GenTicketResponse)
  return false;
#undef DO_
}

void GenTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.GenTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketResponse.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.GenTicketResponse)
}

::google::protobuf::uint8* GenTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.GenTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketResponse.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.GenTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.GenTicketResponse)
  return target;
}

size_t GenTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.GenTicketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.GenTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.GenTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.GenTicketResponse)
    MergeFrom(*source);
  }
}

void GenTicketResponse::MergeFrom(const GenTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.GenTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void GenTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.GenTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenTicketResponse::CopyFrom(const GenTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.GenTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenTicketResponse::IsInitialized() const {
  return true;
}

void GenTicketResponse::Swap(GenTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenTicketResponse::InternalSwap(GenTicketResponse* other) {
  using std::swap;
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GenTicketResponse::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VerifyTicketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyTicketRequest::kUserIdFieldNumber;
const int VerifyTicketRequest::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyTicketRequest::VerifyTicketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_VerifyTicketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.VerifyTicketRequest)
}
VerifyTicketRequest::VerifyTicketRequest(const VerifyTicketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticket().size() > 0) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.VerifyTicketRequest)
}

void VerifyTicketRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VerifyTicketRequest::~VerifyTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.VerifyTicketRequest)
  SharedDtor();
}

void VerifyTicketRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyTicketRequest::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyTicketRequest& VerifyTicketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_VerifyTicketRequest.base);
  return *internal_default_instance();
}


void VerifyTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.VerifyTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VerifyTicketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.VerifyTicketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.VerifyTicketRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), static_cast<int>(this->ticket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.VerifyTicketRequest.ticket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.VerifyTicketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.VerifyTicketRequest)
  return false;
#undef DO_
}

void VerifyTicketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.VerifyTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketRequest.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.VerifyTicketRequest)
}

::google::protobuf::uint8* VerifyTicketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.VerifyTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketRequest.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.VerifyTicketRequest)
  return target;
}

size_t VerifyTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.VerifyTicketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyTicketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.VerifyTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyTicketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyTicketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.VerifyTicketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.VerifyTicketRequest)
    MergeFrom(*source);
  }
}

void VerifyTicketRequest::MergeFrom(const VerifyTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.VerifyTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void VerifyTicketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.VerifyTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyTicketRequest::CopyFrom(const VerifyTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.VerifyTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTicketRequest::IsInitialized() const {
  return true;
}

void VerifyTicketRequest::Swap(VerifyTicketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyTicketRequest::InternalSwap(VerifyTicketRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyTicketRequest::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VerifyTicketResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyTicketResponse::VerifyTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_VerifyTicketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.VerifyTicketResponse)
}
VerifyTicketResponse::VerifyTicketResponse(const VerifyTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.VerifyTicketResponse)
}

void VerifyTicketResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VerifyTicketResponse::~VerifyTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.VerifyTicketResponse)
  SharedDtor();
}

void VerifyTicketResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyTicketResponse::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyTicketResponse& VerifyTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_VerifyTicketResponse.base);
  return *internal_default_instance();
}


void VerifyTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.VerifyTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VerifyTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.VerifyTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.VerifyTicketResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.VerifyTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.VerifyTicketResponse)
  return false;
#undef DO_
}

void VerifyTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.VerifyTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.VerifyTicketResponse)
}

::google::protobuf::uint8* VerifyTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.VerifyTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.VerifyTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.VerifyTicketResponse)
  return target;
}

size_t VerifyTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.VerifyTicketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.VerifyTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.VerifyTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.VerifyTicketResponse)
    MergeFrom(*source);
  }
}

void VerifyTicketResponse::MergeFrom(const VerifyTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.VerifyTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void VerifyTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.VerifyTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyTicketResponse::CopyFrom(const VerifyTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.VerifyTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTicketResponse::IsInitialized() const {
  return true;
}

void VerifyTicketResponse::Swap(VerifyTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyTicketResponse::InternalSwap(VerifyTicketResponse* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyTicketResponse::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateTicketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTicketRequest::kUserIdFieldNumber;
const int UpdateTicketRequest::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTicketRequest::UpdateTicketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_UpdateTicketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.UpdateTicketRequest)
}
UpdateTicketRequest::UpdateTicketRequest(const UpdateTicketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticket().size() > 0) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.UpdateTicketRequest)
}

void UpdateTicketRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateTicketRequest::~UpdateTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.UpdateTicketRequest)
  SharedDtor();
}

void UpdateTicketRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateTicketRequest::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateTicketRequest& UpdateTicketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_UpdateTicketRequest.base);
  return *internal_default_instance();
}


void UpdateTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.UpdateTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpdateTicketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.UpdateTicketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.UpdateTicketRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), static_cast<int>(this->ticket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.UpdateTicketRequest.ticket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.UpdateTicketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.UpdateTicketRequest)
  return false;
#undef DO_
}

void UpdateTicketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.UpdateTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketRequest.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.UpdateTicketRequest)
}

::google::protobuf::uint8* UpdateTicketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.UpdateTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketRequest.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.UpdateTicketRequest)
  return target;
}

size_t UpdateTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.UpdateTicketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTicketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.UpdateTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTicketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateTicketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.UpdateTicketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.UpdateTicketRequest)
    MergeFrom(*source);
  }
}

void UpdateTicketRequest::MergeFrom(const UpdateTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.UpdateTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void UpdateTicketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.UpdateTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTicketRequest::CopyFrom(const UpdateTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.UpdateTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTicketRequest::IsInitialized() const {
  return true;
}

void UpdateTicketRequest::Swap(UpdateTicketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTicketRequest::InternalSwap(UpdateTicketRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateTicketRequest::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateTicketResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTicketResponse::kTicketFieldNumber;
const int UpdateTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTicketResponse::UpdateTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_auth_2eproto::scc_info_UpdateTicketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.Auth.UpdateTicketResponse)
}
UpdateTicketResponse::UpdateTicketResponse(const UpdateTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticket().size() > 0) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.Auth.UpdateTicketResponse)
}

void UpdateTicketResponse::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateTicketResponse::~UpdateTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.Auth.UpdateTicketResponse)
  SharedDtor();
}

void UpdateTicketResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateTicketResponse::descriptor() {
  ::protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateTicketResponse& UpdateTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_auth_2eproto::scc_info_UpdateTicketResponse.base);
  return *internal_default_instance();
}


void UpdateTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.Auth.UpdateTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpdateTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.Auth.UpdateTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), static_cast<int>(this->ticket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.UpdateTicketResponse.ticket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.Auth.UpdateTicketResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.Auth.UpdateTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.Auth.UpdateTicketResponse)
  return false;
#undef DO_
}

void UpdateTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.Auth.UpdateTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketResponse.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.Auth.UpdateTicketResponse)
}

::google::protobuf::uint8* UpdateTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.Auth.UpdateTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketResponse.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.Auth.UpdateTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.Auth.UpdateTicketResponse)
  return target;
}

size_t UpdateTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.Auth.UpdateTicketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.Auth.UpdateTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.Auth.UpdateTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.Auth.UpdateTicketResponse)
    MergeFrom(*source);
  }
}

void UpdateTicketResponse::MergeFrom(const UpdateTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.Auth.UpdateTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void UpdateTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.Auth.UpdateTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTicketResponse::CopyFrom(const UpdateTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.Auth.UpdateTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTicketResponse::IsInitialized() const {
  return true;
}

void UpdateTicketResponse::Swap(UpdateTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTicketResponse::InternalSwap(UpdateTicketResponse* other) {
  using std::swap;
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateTicketResponse::GetMetadata() const {
  protobuf_auth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_auth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Auth
}  // namespace MySvr
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::GenTicketRequest* Arena::CreateMaybeMessage< ::MySvr::Auth::GenTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::GenTicketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::GenTicketResponse* Arena::CreateMaybeMessage< ::MySvr::Auth::GenTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::GenTicketResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::VerifyTicketRequest* Arena::CreateMaybeMessage< ::MySvr::Auth::VerifyTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::VerifyTicketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::VerifyTicketResponse* Arena::CreateMaybeMessage< ::MySvr::Auth::VerifyTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::VerifyTicketResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::UpdateTicketRequest* Arena::CreateMaybeMessage< ::MySvr::Auth::UpdateTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::UpdateTicketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::Auth::UpdateTicketResponse* Arena::CreateMaybeMessage< ::MySvr::Auth::UpdateTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::Auth::UpdateTicketResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
