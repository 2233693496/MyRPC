// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authstore.proto

#include "authstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_authstore_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_authstore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ticket;
}  // namespace protobuf_authstore_2eproto
namespace MySvr {
namespace AuthStore {
class TicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ticket>
      _instance;
} _Ticket_default_instance_;
class SetTicketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetTicketRequest>
      _instance;
} _SetTicketRequest_default_instance_;
class SetTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetTicketResponse>
      _instance;
} _SetTicketResponse_default_instance_;
class GetTicketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTicketRequest>
      _instance;
} _GetTicketRequest_default_instance_;
class GetTicketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTicketResponse>
      _instance;
} _GetTicketResponse_default_instance_;
}  // namespace AuthStore
}  // namespace MySvr
namespace protobuf_authstore_2eproto {
static void InitDefaultsTicket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_Ticket_default_instance_;
    new (ptr) ::MySvr::AuthStore::Ticket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::Ticket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ticket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTicket}, {}};

static void InitDefaultsSetTicketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_SetTicketRequest_default_instance_;
    new (ptr) ::MySvr::AuthStore::SetTicketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::SetTicketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetTicketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetTicketRequest}, {
      &protobuf_authstore_2eproto::scc_info_Ticket.base,}};

static void InitDefaultsSetTicketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_SetTicketResponse_default_instance_;
    new (ptr) ::MySvr::AuthStore::SetTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::SetTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetTicketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetTicketResponse}, {}};

static void InitDefaultsGetTicketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_GetTicketRequest_default_instance_;
    new (ptr) ::MySvr::AuthStore::GetTicketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::GetTicketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTicketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTicketRequest}, {}};

static void InitDefaultsGetTicketResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_GetTicketResponse_default_instance_;
    new (ptr) ::MySvr::AuthStore::GetTicketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::GetTicketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTicketResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTicketResponse}, {
      &protobuf_authstore_2eproto::scc_info_Ticket.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Ticket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetTicketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetTicketResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTicketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTicketResponse.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::Ticket, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::Ticket, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, expire_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::SetTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::SetTicketResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::GetTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::GetTicketRequest, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MySvr::AuthStore::Ticket)},
  { 7, -1, sizeof(::MySvr::AuthStore::SetTicketRequest)},
  { 14, -1, sizeof(::MySvr::AuthStore::SetTicketResponse)},
  { 20, -1, sizeof(::MySvr::AuthStore::GetTicketRequest)},
  { 26, -1, sizeof(::MySvr::AuthStore::GetTicketResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::AuthStore::_Ticket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::AuthStore::_SetTicketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::AuthStore::_SetTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::AuthStore::_GetTicketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MySvr::AuthStore::_GetTicketResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "authstore.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017authstore.proto\022\017MySvr.AuthStore\032\nbase"
      ".proto\")\n\006Ticket\022\017\n\007user_id\030\001 \001(\t\022\016\n\006tic"
      "ket\030\002 \001(\t\"P\n\020SetTicketRequest\022\'\n\006ticket\030"
      "\001 \001(\0132\027.MySvr.AuthStore.Ticket\022\023\n\013expire"
      "_time\030\002 \001(\005\"$\n\021SetTicketResponse\022\017\n\007mess"
      "age\030\001 \001(\t\"#\n\020GetTicketRequest\022\017\n\007user_id"
      "\030\001 \001(\t\"M\n\021GetTicketResponse\022\'\n\006ticket\030\001 "
      "\001(\0132\027.MySvr.AuthStore.Ticket\022\017\n\007message\030"
      "\002 \001(\t2\272\001\n\tAuthStore\022R\n\tSetTicket\022!.MySvr"
      ".AuthStore.SetTicketRequest\032\".MySvr.Auth"
      "Store.SetTicketResponse\022R\n\tGetTicket\022!.M"
      "ySvr.AuthStore.GetTicketRequest\032\".MySvr."
      "AuthStore.GetTicketResponse\032\005\210\265\030\234\rb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "authstore.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_authstore_2eproto
namespace MySvr {
namespace AuthStore {

// ===================================================================

void Ticket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ticket::kUserIdFieldNumber;
const int Ticket::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ticket::Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_authstore_2eproto::scc_info_Ticket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.AuthStore.Ticket)
}
Ticket::Ticket(const Ticket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticket().size() > 0) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.Ticket)
}

void Ticket::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ticket::~Ticket() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.Ticket)
  SharedDtor();
}

void Ticket::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ticket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ticket::descriptor() {
  ::protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ticket& Ticket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_authstore_2eproto::scc_info_Ticket.base);
  return *internal_default_instance();
}


void Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.AuthStore.Ticket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.AuthStore.Ticket.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), static_cast<int>(this->ticket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.AuthStore.Ticket.ticket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.AuthStore.Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.AuthStore.Ticket)
  return false;
#undef DO_
}

void Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.AuthStore.Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.AuthStore.Ticket)
}

::google::protobuf::uint8* Ticket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), static_cast<int>(this->ticket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.Ticket)
  return target;
}

size_t Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.Ticket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const Ticket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ticket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.Ticket)
    MergeFrom(*source);
  }
}

void Ticket::MergeFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ticket::CopyFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ticket::IsInitialized() const {
  return true;
}

void Ticket::Swap(Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ticket::InternalSwap(Ticket* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ticket::GetMetadata() const {
  protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetTicketRequest::InitAsDefaultInstance() {
  ::MySvr::AuthStore::_SetTicketRequest_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::MySvr::AuthStore::Ticket*>(
      ::MySvr::AuthStore::Ticket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTicketRequest::kTicketFieldNumber;
const int SetTicketRequest::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTicketRequest::SetTicketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_authstore_2eproto::scc_info_SetTicketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.AuthStore.SetTicketRequest)
}
SetTicketRequest::SetTicketRequest(const SetTicketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::MySvr::AuthStore::Ticket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  expire_time_ = from.expire_time_;
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.SetTicketRequest)
}

void SetTicketRequest::SharedCtor() {
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(expire_time_));
}

SetTicketRequest::~SetTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.SetTicketRequest)
  SharedDtor();
}

void SetTicketRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void SetTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetTicketRequest::descriptor() {
  ::protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTicketRequest& SetTicketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_authstore_2eproto::scc_info_SetTicketRequest.base);
  return *internal_default_instance();
}


void SetTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.SetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ticket_ != NULL) {
    delete ticket_;
  }
  ticket_ = NULL;
  expire_time_ = 0;
  _internal_metadata_.Clear();
}

bool SetTicketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.AuthStore.SetTicketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MySvr.AuthStore.Ticket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expire_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.AuthStore.SetTicketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.AuthStore.SetTicketRequest)
  return false;
#undef DO_
}

void SetTicketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.AuthStore.SetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ticket(), output);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expire_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.AuthStore.SetTicketRequest)
}

::google::protobuf::uint8* SetTicketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.SetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ticket(), deterministic, target);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expire_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.SetTicketRequest)
  return target;
}

size_t SetTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.SetTicketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expire_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTicketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.SetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTicketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTicketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.SetTicketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.SetTicketRequest)
    MergeFrom(*source);
  }
}

void SetTicketRequest::MergeFrom(const SetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.SetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::MySvr::AuthStore::Ticket::MergeFrom(from.ticket());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
}

void SetTicketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.SetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTicketRequest::CopyFrom(const SetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.SetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTicketRequest::IsInitialized() const {
  return true;
}

void SetTicketRequest::Swap(SetTicketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTicketRequest::InternalSwap(SetTicketRequest* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(expire_time_, other->expire_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetTicketRequest::GetMetadata() const {
  protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetTicketResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTicketResponse::SetTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_authstore_2eproto::scc_info_SetTicketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.AuthStore.SetTicketResponse)
}
SetTicketResponse::SetTicketResponse(const SetTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.SetTicketResponse)
}

void SetTicketResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetTicketResponse::~SetTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.SetTicketResponse)
  SharedDtor();
}

void SetTicketResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetTicketResponse::descriptor() {
  ::protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTicketResponse& SetTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_authstore_2eproto::scc_info_SetTicketResponse.base);
  return *internal_default_instance();
}


void SetTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.SetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SetTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.AuthStore.SetTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.AuthStore.SetTicketResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.AuthStore.SetTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.AuthStore.SetTicketResponse)
  return false;
#undef DO_
}

void SetTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.AuthStore.SetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.SetTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.AuthStore.SetTicketResponse)
}

::google::protobuf::uint8* SetTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.SetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.SetTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.SetTicketResponse)
  return target;
}

size_t SetTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.SetTicketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.SetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.SetTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.SetTicketResponse)
    MergeFrom(*source);
  }
}

void SetTicketResponse::MergeFrom(const SetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.SetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SetTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.SetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTicketResponse::CopyFrom(const SetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.SetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTicketResponse::IsInitialized() const {
  return true;
}

void SetTicketResponse::Swap(SetTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTicketResponse::InternalSwap(SetTicketResponse* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetTicketResponse::GetMetadata() const {
  protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTicketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTicketRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTicketRequest::GetTicketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_authstore_2eproto::scc_info_GetTicketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.AuthStore.GetTicketRequest)
}
GetTicketRequest::GetTicketRequest(const GetTicketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.GetTicketRequest)
}

void GetTicketRequest::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTicketRequest::~GetTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.GetTicketRequest)
  SharedDtor();
}

void GetTicketRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTicketRequest::descriptor() {
  ::protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTicketRequest& GetTicketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_authstore_2eproto::scc_info_GetTicketRequest.base);
  return *internal_default_instance();
}


void GetTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.GetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetTicketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.AuthStore.GetTicketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.AuthStore.GetTicketRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.AuthStore.GetTicketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.AuthStore.GetTicketRequest)
  return false;
#undef DO_
}

void GetTicketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.AuthStore.GetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.AuthStore.GetTicketRequest)
}

::google::protobuf::uint8* GetTicketRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.GetTicketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.GetTicketRequest)
  return target;
}

size_t GetTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.GetTicketRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTicketRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.GetTicketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.GetTicketRequest)
    MergeFrom(*source);
  }
}

void GetTicketRequest::MergeFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void GetTicketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketRequest::CopyFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketRequest::IsInitialized() const {
  return true;
}

void GetTicketRequest::Swap(GetTicketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTicketRequest::InternalSwap(GetTicketRequest* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTicketRequest::GetMetadata() const {
  protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTicketResponse::InitAsDefaultInstance() {
  ::MySvr::AuthStore::_GetTicketResponse_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::MySvr::AuthStore::Ticket*>(
      ::MySvr::AuthStore::Ticket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTicketResponse::kTicketFieldNumber;
const int GetTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTicketResponse::GetTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_authstore_2eproto::scc_info_GetTicketResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MySvr.AuthStore.GetTicketResponse)
}
GetTicketResponse::GetTicketResponse(const GetTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ticket()) {
    ticket_ = new ::MySvr::AuthStore::Ticket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.GetTicketResponse)
}

void GetTicketResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_ = NULL;
}

GetTicketResponse::~GetTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.GetTicketResponse)
  SharedDtor();
}

void GetTicketResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ticket_;
}

void GetTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTicketResponse::descriptor() {
  ::protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTicketResponse& GetTicketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_authstore_2eproto::scc_info_GetTicketResponse.base);
  return *internal_default_instance();
}


void GetTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.GetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ticket_ != NULL) {
    delete ticket_;
  }
  ticket_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MySvr.AuthStore.GetTicketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MySvr.AuthStore.Ticket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MySvr.AuthStore.GetTicketResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MySvr.AuthStore.GetTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MySvr.AuthStore.GetTicketResponse)
  return false;
#undef DO_
}

void GetTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MySvr.AuthStore.GetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ticket(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MySvr.AuthStore.GetTicketResponse)
}

::google::protobuf::uint8* GetTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.GetTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ticket(), deterministic, target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.GetTicketResponse)
  return target;
}

size_t GetTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.GetTicketResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.GetTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.GetTicketResponse)
    MergeFrom(*source);
  }
}

void GetTicketResponse::MergeFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ticket()) {
    mutable_ticket()->::MySvr::AuthStore::Ticket::MergeFrom(from.ticket());
  }
}

void GetTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketResponse::CopyFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketResponse::IsInitialized() const {
  return true;
}

void GetTicketResponse::Swap(GetTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTicketResponse::InternalSwap(GetTicketResponse* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ticket_, other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTicketResponse::GetMetadata() const {
  protobuf_authstore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_authstore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AuthStore
}  // namespace MySvr
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::AuthStore::Ticket* Arena::CreateMaybeMessage< ::MySvr::AuthStore::Ticket >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::AuthStore::Ticket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::AuthStore::SetTicketRequest* Arena::CreateMaybeMessage< ::MySvr::AuthStore::SetTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::AuthStore::SetTicketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::AuthStore::SetTicketResponse* Arena::CreateMaybeMessage< ::MySvr::AuthStore::SetTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::AuthStore::SetTicketResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::AuthStore::GetTicketRequest* Arena::CreateMaybeMessage< ::MySvr::AuthStore::GetTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::AuthStore::GetTicketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MySvr::AuthStore::GetTicketResponse* Arena::CreateMaybeMessage< ::MySvr::AuthStore::GetTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MySvr::AuthStore::GetTicketResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
