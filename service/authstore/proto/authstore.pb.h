// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authstore.proto

#ifndef PROTOBUF_INCLUDED_authstore_2eproto
#define PROTOBUF_INCLUDED_authstore_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_authstore_2eproto 

namespace protobuf_authstore_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_authstore_2eproto
namespace MySvr {
namespace AuthStore {
class GetTicketRequest;
class GetTicketRequestDefaultTypeInternal;
extern GetTicketRequestDefaultTypeInternal _GetTicketRequest_default_instance_;
class GetTicketResponse;
class GetTicketResponseDefaultTypeInternal;
extern GetTicketResponseDefaultTypeInternal _GetTicketResponse_default_instance_;
class SetTicketRequest;
class SetTicketRequestDefaultTypeInternal;
extern SetTicketRequestDefaultTypeInternal _SetTicketRequest_default_instance_;
class SetTicketResponse;
class SetTicketResponseDefaultTypeInternal;
extern SetTicketResponseDefaultTypeInternal _SetTicketResponse_default_instance_;
class Ticket;
class TicketDefaultTypeInternal;
extern TicketDefaultTypeInternal _Ticket_default_instance_;
}  // namespace AuthStore
}  // namespace MySvr
namespace google {
namespace protobuf {
template<> ::MySvr::AuthStore::GetTicketRequest* Arena::CreateMaybeMessage<::MySvr::AuthStore::GetTicketRequest>(Arena*);
template<> ::MySvr::AuthStore::GetTicketResponse* Arena::CreateMaybeMessage<::MySvr::AuthStore::GetTicketResponse>(Arena*);
template<> ::MySvr::AuthStore::SetTicketRequest* Arena::CreateMaybeMessage<::MySvr::AuthStore::SetTicketRequest>(Arena*);
template<> ::MySvr::AuthStore::SetTicketResponse* Arena::CreateMaybeMessage<::MySvr::AuthStore::SetTicketResponse>(Arena*);
template<> ::MySvr::AuthStore::Ticket* Arena::CreateMaybeMessage<::MySvr::AuthStore::Ticket>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MySvr {
namespace AuthStore {

// ===================================================================

class Ticket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.AuthStore.Ticket) */ {
 public:
  Ticket();
  virtual ~Ticket();

  Ticket(const Ticket& from);

  inline Ticket& operator=(const Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ticket(Ticket&& from) noexcept
    : Ticket() {
    *this = ::std::move(from);
  }

  inline Ticket& operator=(Ticket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ticket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ticket* internal_default_instance() {
    return reinterpret_cast<const Ticket*>(
               &_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ticket* other);
  friend void swap(Ticket& a, Ticket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ticket* New() const final {
    return CreateMaybeMessage<Ticket>(NULL);
  }

  Ticket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ticket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ticket& from);
  void MergeFrom(const Ticket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ticket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string ticket = 2;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:MySvr.AuthStore.Ticket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTicketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.AuthStore.SetTicketRequest) */ {
 public:
  SetTicketRequest();
  virtual ~SetTicketRequest();

  SetTicketRequest(const SetTicketRequest& from);

  inline SetTicketRequest& operator=(const SetTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTicketRequest(SetTicketRequest&& from) noexcept
    : SetTicketRequest() {
    *this = ::std::move(from);
  }

  inline SetTicketRequest& operator=(SetTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTicketRequest* internal_default_instance() {
    return reinterpret_cast<const SetTicketRequest*>(
               &_SetTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetTicketRequest* other);
  friend void swap(SetTicketRequest& a, SetTicketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTicketRequest* New() const final {
    return CreateMaybeMessage<SetTicketRequest>(NULL);
  }

  SetTicketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTicketRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTicketRequest& from);
  void MergeFrom(const SetTicketRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTicketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MySvr.AuthStore.Ticket ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  private:
  const ::MySvr::AuthStore::Ticket& _internal_ticket() const;
  public:
  const ::MySvr::AuthStore::Ticket& ticket() const;
  ::MySvr::AuthStore::Ticket* release_ticket();
  ::MySvr::AuthStore::Ticket* mutable_ticket();
  void set_allocated_ticket(::MySvr::AuthStore::Ticket* ticket);

  // int32 expire_time = 2;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 2;
  ::google::protobuf::int32 expire_time() const;
  void set_expire_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MySvr.AuthStore.SetTicketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::MySvr::AuthStore::Ticket* ticket_;
  ::google::protobuf::int32 expire_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTicketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.AuthStore.SetTicketResponse) */ {
 public:
  SetTicketResponse();
  virtual ~SetTicketResponse();

  SetTicketResponse(const SetTicketResponse& from);

  inline SetTicketResponse& operator=(const SetTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTicketResponse(SetTicketResponse&& from) noexcept
    : SetTicketResponse() {
    *this = ::std::move(from);
  }

  inline SetTicketResponse& operator=(SetTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTicketResponse* internal_default_instance() {
    return reinterpret_cast<const SetTicketResponse*>(
               &_SetTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetTicketResponse* other);
  friend void swap(SetTicketResponse& a, SetTicketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTicketResponse* New() const final {
    return CreateMaybeMessage<SetTicketResponse>(NULL);
  }

  SetTicketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTicketResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTicketResponse& from);
  void MergeFrom(const SetTicketResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTicketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MySvr.AuthStore.SetTicketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTicketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.AuthStore.GetTicketRequest) */ {
 public:
  GetTicketRequest();
  virtual ~GetTicketRequest();

  GetTicketRequest(const GetTicketRequest& from);

  inline GetTicketRequest& operator=(const GetTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTicketRequest(GetTicketRequest&& from) noexcept
    : GetTicketRequest() {
    *this = ::std::move(from);
  }

  inline GetTicketRequest& operator=(GetTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketRequest* internal_default_instance() {
    return reinterpret_cast<const GetTicketRequest*>(
               &_GetTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetTicketRequest* other);
  friend void swap(GetTicketRequest& a, GetTicketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTicketRequest* New() const final {
    return CreateMaybeMessage<GetTicketRequest>(NULL);
  }

  GetTicketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTicketRequest& from);
  void MergeFrom(const GetTicketRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:MySvr.AuthStore.GetTicketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authstore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTicketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MySvr.AuthStore.GetTicketResponse) */ {
 public:
  GetTicketResponse();
  virtual ~GetTicketResponse();

  GetTicketResponse(const GetTicketResponse& from);

  inline GetTicketResponse& operator=(const GetTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTicketResponse(GetTicketResponse&& from) noexcept
    : GetTicketResponse() {
    *this = ::std::move(from);
  }

  inline GetTicketResponse& operator=(GetTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketResponse* internal_default_instance() {
    return reinterpret_cast<const GetTicketResponse*>(
               &_GetTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetTicketResponse* other);
  friend void swap(GetTicketResponse& a, GetTicketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTicketResponse* New() const final {
    return CreateMaybeMessage<GetTicketResponse>(NULL);
  }

  GetTicketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTicketResponse& from);
  void MergeFrom(const GetTicketResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .MySvr.AuthStore.Ticket ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  private:
  const ::MySvr::AuthStore::Ticket& _internal_ticket() const;
  public:
  const ::MySvr::AuthStore::Ticket& ticket() const;
  ::MySvr::AuthStore::Ticket* release_ticket();
  ::MySvr::AuthStore::Ticket* mutable_ticket();
  void set_allocated_ticket(::MySvr::AuthStore::Ticket* ticket);

  // @@protoc_insertion_point(class_scope:MySvr.AuthStore.GetTicketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::MySvr::AuthStore::Ticket* ticket_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authstore_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ticket

// string user_id = 1;
inline void Ticket::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ticket::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.Ticket.user_id)
  return user_id_.GetNoArena();
}
inline void Ticket::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.Ticket.user_id)
}
#if LANG_CXX11
inline void Ticket::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.AuthStore.Ticket.user_id)
}
#endif
inline void Ticket::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.AuthStore.Ticket.user_id)
}
inline void Ticket::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.AuthStore.Ticket.user_id)
}
inline ::std::string* Ticket::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.Ticket.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.Ticket.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.Ticket.user_id)
}

// string ticket = 2;
inline void Ticket::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ticket::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.Ticket.ticket)
  return ticket_.GetNoArena();
}
inline void Ticket::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.Ticket.ticket)
}
#if LANG_CXX11
inline void Ticket::set_ticket(::std::string&& value) {
  
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.AuthStore.Ticket.ticket)
}
#endif
inline void Ticket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.AuthStore.Ticket.ticket)
}
inline void Ticket::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.AuthStore.Ticket.ticket)
}
inline ::std::string* Ticket::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.Ticket.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.Ticket.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.Ticket.ticket)
}

// -------------------------------------------------------------------

// SetTicketRequest

// .MySvr.AuthStore.Ticket ticket = 1;
inline bool SetTicketRequest::has_ticket() const {
  return this != internal_default_instance() && ticket_ != NULL;
}
inline void SetTicketRequest::clear_ticket() {
  if (GetArenaNoVirtual() == NULL && ticket_ != NULL) {
    delete ticket_;
  }
  ticket_ = NULL;
}
inline const ::MySvr::AuthStore::Ticket& SetTicketRequest::_internal_ticket() const {
  return *ticket_;
}
inline const ::MySvr::AuthStore::Ticket& SetTicketRequest::ticket() const {
  const ::MySvr::AuthStore::Ticket* p = ticket_;
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.SetTicketRequest.ticket)
  return p != NULL ? *p : *reinterpret_cast<const ::MySvr::AuthStore::Ticket*>(
      &::MySvr::AuthStore::_Ticket_default_instance_);
}
inline ::MySvr::AuthStore::Ticket* SetTicketRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.SetTicketRequest.ticket)
  
  ::MySvr::AuthStore::Ticket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline ::MySvr::AuthStore::Ticket* SetTicketRequest::mutable_ticket() {
  
  if (ticket_ == NULL) {
    auto* p = CreateMaybeMessage<::MySvr::AuthStore::Ticket>(GetArenaNoVirtual());
    ticket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.SetTicketRequest.ticket)
  return ticket_;
}
inline void SetTicketRequest::set_allocated_ticket(::MySvr::AuthStore::Ticket* ticket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ticket_;
  }
  if (ticket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ticket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    
  } else {
    
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.SetTicketRequest.ticket)
}

// int32 expire_time = 2;
inline void SetTicketRequest::clear_expire_time() {
  expire_time_ = 0;
}
inline ::google::protobuf::int32 SetTicketRequest::expire_time() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.SetTicketRequest.expire_time)
  return expire_time_;
}
inline void SetTicketRequest::set_expire_time(::google::protobuf::int32 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.SetTicketRequest.expire_time)
}

// -------------------------------------------------------------------

// SetTicketResponse

// string message = 1;
inline void SetTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.SetTicketResponse.message)
  return message_.GetNoArena();
}
inline void SetTicketResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.SetTicketResponse.message)
}
#if LANG_CXX11
inline void SetTicketResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.AuthStore.SetTicketResponse.message)
}
#endif
inline void SetTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.AuthStore.SetTicketResponse.message)
}
inline void SetTicketResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.AuthStore.SetTicketResponse.message)
}
inline ::std::string* SetTicketResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.SetTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.SetTicketResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.SetTicketResponse.message)
}

// -------------------------------------------------------------------

// GetTicketRequest

// string user_id = 1;
inline void GetTicketRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.GetTicketRequest.user_id)
  return user_id_.GetNoArena();
}
inline void GetTicketRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.GetTicketRequest.user_id)
}
#if LANG_CXX11
inline void GetTicketRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.AuthStore.GetTicketRequest.user_id)
}
#endif
inline void GetTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.AuthStore.GetTicketRequest.user_id)
}
inline void GetTicketRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.AuthStore.GetTicketRequest.user_id)
}
inline ::std::string* GetTicketRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.GetTicketRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.GetTicketRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTicketRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.GetTicketRequest.user_id)
}

// -------------------------------------------------------------------

// GetTicketResponse

// .MySvr.AuthStore.Ticket ticket = 1;
inline bool GetTicketResponse::has_ticket() const {
  return this != internal_default_instance() && ticket_ != NULL;
}
inline void GetTicketResponse::clear_ticket() {
  if (GetArenaNoVirtual() == NULL && ticket_ != NULL) {
    delete ticket_;
  }
  ticket_ = NULL;
}
inline const ::MySvr::AuthStore::Ticket& GetTicketResponse::_internal_ticket() const {
  return *ticket_;
}
inline const ::MySvr::AuthStore::Ticket& GetTicketResponse::ticket() const {
  const ::MySvr::AuthStore::Ticket* p = ticket_;
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.GetTicketResponse.ticket)
  return p != NULL ? *p : *reinterpret_cast<const ::MySvr::AuthStore::Ticket*>(
      &::MySvr::AuthStore::_Ticket_default_instance_);
}
inline ::MySvr::AuthStore::Ticket* GetTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.GetTicketResponse.ticket)
  
  ::MySvr::AuthStore::Ticket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline ::MySvr::AuthStore::Ticket* GetTicketResponse::mutable_ticket() {
  
  if (ticket_ == NULL) {
    auto* p = CreateMaybeMessage<::MySvr::AuthStore::Ticket>(GetArenaNoVirtual());
    ticket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.GetTicketResponse.ticket)
  return ticket_;
}
inline void GetTicketResponse::set_allocated_ticket(::MySvr::AuthStore::Ticket* ticket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ticket_;
  }
  if (ticket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ticket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    
  } else {
    
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.GetTicketResponse.ticket)
}

// string message = 2;
inline void GetTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.AuthStore.GetTicketResponse.message)
  return message_.GetNoArena();
}
inline void GetTicketResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySvr.AuthStore.GetTicketResponse.message)
}
#if LANG_CXX11
inline void GetTicketResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySvr.AuthStore.GetTicketResponse.message)
}
#endif
inline void GetTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySvr.AuthStore.GetTicketResponse.message)
}
inline void GetTicketResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySvr.AuthStore.GetTicketResponse.message)
}
inline ::std::string* GetTicketResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:MySvr.AuthStore.GetTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.AuthStore.GetTicketResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:MySvr.AuthStore.GetTicketResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AuthStore
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_authstore_2eproto
